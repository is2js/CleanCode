def solution(): 
    # 1. 계약에 의한 디자인
    # 계약을 어겼을 경우 명시적으로 왜 계속할 수 없는지 예외를 발생시키는 것이다.
    # 계약은 주로 사전 조건과 사후 조건을 명시하지만 때로는 불변식과 부작용을 기술한다.
    
    # (1.1.1) 사전조건 : 파라미터를 검사한다
    # -> 호출자(클라이언트)에게 부과된 임무다.
    # 하지만 런타임 환경에서 올바른 입력 값을 전달하는지 알 수 없다.
    # 따라서 기대하는 입력 값이 맞는지 확인해야 하는데, 함수내 로직을 실행하기 전에 검증한다
    # (1.1.2)사후조건 : 반환받은 값을 지역변수로 빼서 return하기 전 검증한다.

    # 1.2. 계약에 의한 디자인을 하는 이유
    # 런타임 오류가 발생했을 시 어디가 문제 있는지 빠르게 식별할 수 있기 때문이다.
    # -> 즉 오류가 사전 조건 검증에서 발생했는지, 사후 조건 검증에서 발생했는지 알 수 있다.
    # --> 전자(사전조건)라면 호출 쪽에 문제가 있는 것이고,
    # --> 후자(사후조건)라면 값을 반환하는 함수 내부에 문제가 있는 것이다.
    pass
 
 
if __name__ == '__main__': 
    solution() 
