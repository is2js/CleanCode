def solution():
    # 6. 함수와 메서드의 인자
    # (1) 6.1. 파이썬의 함수 인자 동작 방식
    # 파이썬에서는 함수에 인자가 넘어온 경우 기본적으로 "참조" 형태로 가져온다.
    # 다만 이 함수 내에서 인자의 값이 바뀔 경우, 이 인자가 가변형(mutable) 이냐 불변형(immutable) 이냐에 따라
    # 그 결과가 달라진다. 아래 예를 보면 바로 확인해보자

    ## 인자가 가변형(mutable) 인 경우
    def func(a):
        print(f"함수 내 값 할당 전 id: {id(a)}")
        a += "4"
        print(f"함수 내 값 할당 후 id: {id(a)}")

    mutable = [1, 2, 3]
    print(f"함수 호출 전 변수: {mutable}")
    print(f"함수 호출 전 id: {id(mutable)}")
    func(mutable)
    print(f"함수 호출 후 id: {id(mutable)}")
    print(f"함수 호출 후 변수: {mutable}")

    # 함수 호출 전 변수: [1, 2, 3]
    # 함수 호출 전 id: 2930476737096
    # 함수 내 값 할당 전 id: 2930476737096
    # 함수 내 값 할당 후 id: 2930476737096
    # 함수 호출 후 id: 2930476737096
    # 함수 호출 후 변수: [1, 2, 3, '4'] -> python의 list 는 += 증감연산자로 요소를 append할 수 있다.
    # -> 가변형일 경우, 함수 내에서 값을 수정하면 그대로 참조 객체에 수정된다.
    # -> id 도 모두 동일한 것을 알 수 있다.

    immutable = "1 2 3"
    print(f"함수 호출 전 변수: {immutable}")
    print(f"함수 호출 전 id: {id(immutable)}")
    func(immutable)
    print(f"함수 호출 후 id: {id(immutable)}")
    print(f"함수 호출 후 변수: {immutable}")
    # 함수 호출 전 id: 2327387337368
    # 함수 내 값 할당 전 id: 2327387337368
    # 함수 내 값 할당 후 id: 2327387371872
    # 함수 호출 후 id: 2327387337368
    # 함수 호출 후 변수: 1 2 3

    # -> 불변형일 경우, 함수 내에 할당 전 id 가 동일하지만
    # -> 인자 값을 수정하는 순간 id 가 바뀌는 것을 알 수 있다.
    # -> 즉, 값을 수정하는 순간 새로운 객체를 할당하는 것이다.
    # -> 따라서, 기존 인자에 수정한 것이 반영되지 않는다.

    # --> 컬렉션이상의 가변형은 인자<->파라미터가 연결된다.
    # --> 값을 포함한 불변형은 연산시부터 인자 <-> 파라미터 연결이 끊어진다.
    # --> [Tip] 일반적으로 함수 인자를 변경하지 않아야 한다. 최대한 함수에서 발생할 수 있는 부작용을 피하자.



pass

if __name__ == '__main__':
    solution()
